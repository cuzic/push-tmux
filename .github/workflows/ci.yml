name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        version: latest
    
    - name: Set up Python and uv with mise
      run: |
        mise trust
        mise install  # This installs both Python and uv as defined in .mise.toml
        
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
          
    - name: Install dependencies
      run: uv sync --extra test
      
    - name: Run linting with ruff
      run: |
        uv run ruff format --check .
        uv run ruff check .
        
    - name: Run type checking with mypy
      run: uv run mypy push_tmux/ --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors initially
      
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=push_tmux --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        version: latest
    
    - name: Install tmux for integration testing
      run: sudo apt-get update && sudo apt-get install -y tmux
      
    - name: Set up Python and uv with mise
      run: |
        mise trust
        mise install  # Installs both Python and uv
        uv sync --extra test
        
    - name: Run integration tests
      run: |
        # Start tmux session for testing
        tmux new-session -d -s test-session
        
        # Run integration tests
        uv run pytest tests/integration/ -v --tb=short
        
        # Clean up
        tmux kill-session -t test-session || true
      env:
        # Mock environment for integration tests
        PUSHBULLET_TOKEN: mock_token_for_testing
        DEVICE_NAME: ci-test-device

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        version: latest
    
    - name: Set up Python and uv with mise
      run: |
        mise trust
        mise install  # Installs both Python and uv
        uv sync --extra test
        
    - name: Test package installation
      run: |
        # Test that the package can be installed and imported
        uv run python -c "import push_tmux; print('✅ Package imports successfully')"
        
    - name: Test CLI commands
      run: |
        # Test CLI help commands (should work without API token)
        uv run python -m push_tmux --help
        uv run python -m push_tmux register --help
        uv run python -m push_tmux listen --help
        uv run python -m push_tmux daemon --help
        echo "✅ All CLI help commands work"
        
    - name: Test wrapper scripts
      run: |
        # Test that wrapper scripts are executable
        chmod +x push-tmux-wrapper.sh install-wrapper.sh
        ./push-tmux-wrapper.sh --help
        echo "✅ Wrapper scripts work"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        version: latest
        
    - name: Set up Python and uv with mise
      run: |
        mise trust
        mise install  # Installs both Python and uv
        uv sync --extra test
        
    - name: Run safety check
      run: |
        # Install safety for dependency vulnerability scanning
        uv add --dev safety
        uv run safety check
      continue-on-error: true  # Don't fail CI on security warnings initially
      
    - name: Run bandit security linter
      run: |
        # Install bandit for security issue detection
        uv add --dev bandit[toml]
        uv run bandit -r push_tmux/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json